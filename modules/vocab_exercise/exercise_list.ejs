<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>练习题管理</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/css/adminlte.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.min.css">
  <style>
    .editable {
      cursor: pointer;
    }
    .editable:hover {
      background-color: #f8f9fa;
    }
  </style>
</head>
<body class="hold-transition">
  <div class="content-wrapper">
    <section class="content-header">
      <div class="container-fluid">
        <div class="row mb-2">
          <div class="col-sm-6">
            <h1>练习题管理</h1>
          </div>
        </div>
      </div>
    </section>

    <section class="content">
      <div class="card">
        <div class="card-header">
          <div class="row">
            <div class="col-md-8">
              <div class="input-group">
                <input type="text" class="form-control" id="searchInput" placeholder="搜索练习题...">
                <div class="input-group-append">
                  <button class="btn btn-primary" id="searchBtn">搜索</button>
                </div>
              </div>
            </div>
            <div class="col-md-4 text-right">
              <a href="/vocab_exercise/exercise" class="btn btn-success">
                <i class="fas fa-plus"></i> 添加练习题
              </a>
            </div>
          </div>
        </div>
        <div class="card-body">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>ID</th>
                <th>练习题名称</th>
                <th>创建者</th>
                <th>练习人</th>
                <th>练习单词数量</th>
                <th>奖励</th>
                <th>奖励提示</th>
                <th>状态</th>
                <th>操作</th>
              </tr>
            </thead>
            <tbody id="exerciseList">
              <!-- 练习题列表将通过 JavaScript 动态加载 -->
            </tbody>
          </table>
          <div class="mt-3" id="pagination"></div>
        </div>
      </div>
    </section>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/admin-lte@3.1/dist/js/adminlte.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
  
  <script>
    $(document).ready(function() {
      let currentPage = 1;
      let totalPages = 1;
      let keyword = '';

      // 获取 token
      function getToken() {
        return document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
      }

      // 加载练习题列表
      function loadExerciseList(page = 1, keyword = '') {
        const token = getToken();
        if (!token) {
          Swal.fire('错误', '未登录或会话已过期', 'error');
          return;
        }

        currentPage = page;
        
        $.ajax({
          url: `/vocab_exercise/exercise_items?page=${page}&limit=10&keyword=${keyword}`,
          type: 'GET',
          headers: {
            'Authorization': `Bearer ${token}`
          },
          success: function(response) {
            if (response.err_code === 0) {
              const exercises = response.data.list;
              const total = response.data.total;
              totalPages = Math.ceil(total / 10);
              
              let html = '';
              
              if (exercises.length === 0) {
                html = '<tr><td colspan="9" class="text-center">暂无数据</td></tr>';
              } else {
                exercises.forEach(function(exercise) {
                  // 格式化状态显示
                  let statusBadge = '';
                  if (exercise.status === 'unstart') {
                    statusBadge = '<span class="badge badge-warning">未开始</span>';
                  } else if (exercise.status === 'done') {
                    statusBadge = '<span class="badge badge-success">已完成</span>';
                  } else if (exercise.status === 'hidden') {
                    statusBadge = '<span class="badge badge-secondary">隐藏</span>';
                  } else {
                    statusBadge = '<span class="badge badge-info">未知</span>';
                  }
                  
                  html += `
                    <tr>
                      <td>${exercise._id}</td>
                      <td>${exercise.name}</td>
                      <td>${exercise.created_by_name || '未知'}</td>
                      <td>${exercise.user_name || '未知'}</td>
                      <td>${exercise.words.length}</td>
                      <td class="editable reward-cell" data-id="${exercise._id}" data-value="${exercise.award || ''}">${exercise.award || '-'}</td>
                      <td class="editable reward-tips-cell" data-id="${exercise._id}" data-value="${exercise.award_tips || ''}">${exercise.award_tips || '-'}</td>
                      <td class="editable status-cell" data-id="${exercise._id}" data-value="${exercise.status || 'unstart'}">${statusBadge}</td>
                      <td>
                        <a href="/vocab_exercise/exercise?id=${exercise._id}" class="btn btn-sm btn-info">
                          <i class="fas fa-edit"></i> 编辑
                        </a>
                        <button class="btn btn-sm btn-danger delete-exercise" data-id="${exercise._id}">
                          <i class="fas fa-trash"></i> 删除
                        </button>
                      </td>
                    </tr>
                  `;
                });
              }
              
              $('#exerciseList').html(html);
              renderPagination(totalPages, currentPage);
            } else {
              Swal.fire('错误', response.err_msg, 'error');
            }
          },
          error: function(xhr) {
            if (xhr.status === 401) {
              Swal.fire('错误', '未授权，请确保您有足够的权限', 'error');
            } else {
              Swal.fire('错误', '加载练习题列表失败', 'error');
            }
          }
        });
      }

      // 渲染分页
      function renderPagination(totalPages, currentPage) {
        if (totalPages <= 1) {
          $('#pagination').html('');
          return;
        }
        
        let html = '<ul class="pagination justify-content-center">';
        
        // 上一页
        html += `
          <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage - 1}" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
        `;
        
        // 页码
        for (let i = 1; i <= totalPages; i++) {
          html += `
            <li class="page-item ${i === currentPage ? 'active' : ''}">
              <a class="page-link" href="#" data-page="${i}">${i}</a>
            </li>
          `;
        }
        
        // 下一页
        html += `
          <li class="page-item ${currentPage === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" data-page="${currentPage + 1}" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        `;
        
        html += '</ul>';
        $('#pagination').html(html);
      }

      // 分页点击事件
      $(document).on('click', '.page-link', function(e) {
        e.preventDefault();
        const page = $(this).data('page');
        if (page > 0) {
          loadExerciseList(page, $('#searchInput').val());
        }
      });

      // 搜索按钮点击事件
      $('#searchBtn').click(function() {
        const keyword = $('#searchInput').val();
        loadExerciseList(1, keyword);
      });

      // 回车键搜索
      $('#searchInput').keypress(function(e) {
        if (e.which === 13) {
          $('#searchBtn').click();
        }
      });

      // 删除练习题
      $(document).on('click', '.delete-exercise', function() {
        const exerciseId = $(this).data('id');
        
        Swal.fire({
          title: '确认删除',
          text: '您确定要删除这个练习题吗？此操作不可逆。',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#d33',
          cancelButtonColor: '#3085d6',
          confirmButtonText: '是，删除它',
          cancelButtonText: '取消'
        }).then((result) => {
          if (result.isConfirmed) {
            const token = getToken();
            if (!token) {
              Swal.fire('错误', '未登录或会话已过期', 'error');
              return;
            }

            $.ajax({
              url: `/vocab_exercise/delete_exercise/${exerciseId}`,
              type: 'DELETE',
              headers: {
                'Authorization': `Bearer ${token}`
              },
              success: function(response) {
                if (response.err_code === 0) {
                  Swal.fire('已删除', '练习题已成功删除', 'success');
                  loadExerciseList(currentPage);
                } else {
                  Swal.fire('错误', response.err_msg, 'error');
                }
              },
              error: function(xhr) {
                if (xhr.status === 401) {
                  Swal.fire('错误', '未授权，请确保您有足够的权限', 'error');
                } else {
                  Swal.fire('错误', '删除练习题失败', 'error');
                }
              }
            });
          }
        });
      });

      // 编辑奖励
      $(document).on('click', '.reward-cell', function() {
        const exerciseId = $(this).data('id');
        const currentValue = $(this).data('value');
        const cell = $(this);
        
        Swal.fire({
          title: '编辑奖励',
          input: 'text',
          inputValue: currentValue,
          showCancelButton: true,
          confirmButtonText: '保存',
          cancelButtonText: '取消',
          inputValidator: (value) => {
            return new Promise((resolve) => {
              resolve();
            });
          }
        }).then((result) => {
          if (result.isConfirmed) {
            updateExerciseField(exerciseId, 'reward', result.value, function() {
              cell.text(result.value || '-');
              cell.data('value', result.value || '');
            });
          }
        });
      });

      // 编辑奖励提示
      $(document).on('click', '.reward-tips-cell', function() {
        const exerciseId = $(this).data('id');
        const currentValue = $(this).data('value');
        const cell = $(this);
        
        Swal.fire({
          title: '编辑奖励提示',
          input: 'text',
          inputValue: currentValue,
          showCancelButton: true,
          confirmButtonText: '保存',
          cancelButtonText: '取消',
          inputValidator: (value) => {
            return new Promise((resolve) => {
              resolve();
            });
          }
        }).then((result) => {
          if (result.isConfirmed) {
            updateExerciseField(exerciseId, 'reward_tips', result.value, function() {
              cell.text(result.value || '-');
              cell.data('value', result.value || '');
            });
          }
        });
      });

      // 编辑状态
      $(document).on('click', '.status-cell', function() {
        const exerciseId = $(this).data('id');
        const currentValue = $(this).data('value');
        const cell = $(this);
        
        Swal.fire({
          title: '编辑状态',
          input: 'select',
          inputOptions: {
            'unstart': '未开始',
            'done': '完成',
            'hidden': '隐藏'
          },
          inputValue: currentValue,
          showCancelButton: true,
          confirmButtonText: '保存',
          cancelButtonText: '取消'
        }).then((result) => {
          if (result.isConfirmed) {
            updateExerciseField(exerciseId, 'status', result.value, function() {
              let statusBadge = '';
              if (result.value === 'unstart') {
                statusBadge = '<span class="badge badge-warning">未开始</span>';
              } else if (result.value === 'done') {
                statusBadge = '<span class="badge badge-success">已完成</span>';
              } else if (result.value === 'hidden') {
                statusBadge = '<span class="badge badge-secondary">隐藏</span>';
              } else {
                statusBadge = '<span class="badge badge-info">未知</span>';
              }
              
              cell.html(statusBadge);
              cell.data('value', result.value);
            });
          }
        });
      });

      // 更新练习题字段
      function updateExerciseField(exerciseId, field, value, callback) {
        const token = getToken();
        if (!token) {
          Swal.fire('错误', '未登录或会话已过期', 'error');
          return;
        }
        
        const data = {};
        data[field] = value;
        
        $.ajax({
          url: `/vocab_exercise/update/${exerciseId}`,
          type: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          data: JSON.stringify(data),
          success: function(response) {
            if (response.err_code === 0) {
              Swal.fire({
                title: '成功',
                text: '更新成功',
                icon: 'success',
                timer: 1500,
                showConfirmButton: false
              });
              
              if (typeof callback === 'function') {
                callback();
              }
            } else {
              Swal.fire('错误', response.err_msg, 'error');
            }
          },
          error: function(xhr) {
            if (xhr.status === 401) {
              Swal.fire('错误', '未授权，请确保您有足够的权限', 'error');
            } else {
              Swal.fire('错误', '更新失败', 'error');
            }
          }
        });
      }

      // 初始加载
      loadExerciseList();
    });
  </script>
</body>
</html> 