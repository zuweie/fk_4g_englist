<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= exercise.name %> - 小学英语单词练习</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    body {
      background-color: #f8f9fa;
      padding: 20px 0;
      position: relative;
    }
    .practice-container {
      width: calc(100% - 20px);
      margin: 0 auto;
      background-color: #fff;
      border-radius: 10px;
      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
      padding: 30px;
    }
    .practice-title {
      margin-bottom: 20px;
      color: #333;
    }
    .practice-tips {
      background-color: #f8f9fa;
      border-left: 4px solid #6c757d;
      padding: 15px;
      margin-bottom: 30px;
      color: #495057;
    }
    .word-card {
      width: 100%;
      margin: 0 auto 30px;
      border-radius: 10px;
      box-shadow: 0 3px 10px rgba(0,0,0,0.1);
      padding: 20px;
      background-color: white;
      transition: background-color 0.3s;
    }
    .word-card.correct {
      background-color: #d4edda;
      border-color: #c3e6cb;
    }
    .word-card.incorrect {
      background-color: #f8d7da;
      border-color: #f5c6cb;
    }
    .word-meaning {
      font-size: 18px;
      margin-bottom: 15px;
      color: #333;
      text-align: left;
    }
    .divider {
      width: 100%;
      height: 1px;
      background-color: #dee2e6;
      margin: 15px auto;
    }
    .word-container {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      flex-wrap: wrap;
      margin: 20px 0;
    }
    .letter {
      font-size: 32px;
      margin: 0;
      font-weight: bold;
      color: #333;
    }
    .space {
      width: 16px;
      height: 32px;
      margin: 0 2px;
    }
    .blank-container {
      width: 60px;
      height: 80px;
      border: 2px dashed #6c757d;
      border-radius: 8px;
      margin: 0 2px;
      display: flex;
      justify-content: center;
      align-items: center;
      background-color: white;
      position: relative;
    }
    .blank-letter {
      width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 32px;
      font-weight: bold;
      color: #007bff;
      position: relative;
      z-index: 2;
    }
    .submit-btn {
      display: block;
      margin: 30px auto;
      padding: 10px 40px;
      font-size: 18px;
    }
    .eraser-btn {
      position: fixed;
      top: 100px;
      right: 30px;
      width: 50px;
      height: 50px;
      border-radius: 50%;
      background-color: #f8f9fa;
      border: 1px solid #dee2e6;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
      z-index: 1000;
    }
    .eraser-btn i {
      font-size: 24px;
      color: #6c757d;
    }
    .word-actions {
      display: flex;
      justify-content: flex-end;
      margin-top: 10px;
    }
    .peek-btn {
      background: none;
      border: none;
      color: #6c757d;
      cursor: pointer;
    }
    .word-reveal {
      display: none;
      margin-top: 10px;
      font-size: 24px;
    }
    .word-reveal .gap-letter {
      color: #007bff;
      font-weight: bold;
    }

    .canvas-container {
      position: absolute !important;
      top: 0 !important;
      left: 0 !important;
      width: 100% !important;
      height: 100% !important;
      z-index: 1;
    }

    .canvas-container canvas {
    border: 2px solid #ddd;
    touch-action: none; /* 防止移动端手势干扰 */
}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/fabric@5.3.0/dist/fabric.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@4.10.0/dist/tf.min.js"></script>
  <script src="/exercise/model.js"></script>
  <script src="/exercise/blank_canvas.js"></script>
</head>
<body>
  <div class="practice-container">
    <h1 class="practice-title"><%= exercise.name %></h1>
    <div class="practice-tips">
      <%= exercise.award_tips %>
    </div>
    
    <div id="wordCards">
      <% words.forEach(function(word, wordIndex) { %>
        <div class="word-card" id="word-<%= wordIndex %>" data-id="<%= word._id %>" data-word="<%= word.word %>">
          <div class="word-meaning"><%= word.meaning %></div>
          <div class="divider"></div>
          <div class="word-container">
            <% 
              let letterIndex = 0;
              for (let i = 0; i < word.word.length; i++) {
                const char = word.word[i];
                if (char === ' ') { 
            %>
              <div class="space"></div>
            <% } else if (word.gap.includes(i)) { %>
              <div class="blank-container">
                <div class="blank-letter" id="blank_<%= wordIndex %>_<%= i %>" data-correct="<%= char.toLowerCase() %>"></div>
              </div>
            <% } else { %>
              <div class="letter"><%= char %></div>
            <% }
              letterIndex++;
            } %>
          </div>
          <div class="divider"></div>
          <div class="word-actions">
            <button class="peek-btn" data-word-index="<%= wordIndex %>">
              <i class="fas fa-eye-slash"></i>
            </button>
          </div>
          <div class="word-reveal" id="reveal-<%= wordIndex %>">
            <% 
              for (let i = 0; i < word.word.length; i++) {
                const char = word.word[i];
                if (char === ' ') { 
            %>
              &nbsp;
            <% } else if (word.gap.includes(i)) { %>
              <span class="gap-letter"><%= char %></span>
            <% } else { %>
              <%= char %>
            <% }
              } 
            %>
          </div>
        </div>
      <% }); %>
    </div>
    
    <button class="btn btn-primary submit-btn" id="submitBtn">提交</button>
  </div>
  
  <div class="eraser-btn" id="eraserBtn">
    <i class="fas fa-eraser"></i>
  </div>

  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.32/dist/sweetalert2.all.min.js"></script>
  
  <script>
    $(document).ready(async function() {
      // 初始化模型
      const model = new Model();
      await model.isWarmedUp; // 等待模型预热完成
      
      // 存储所有BlankCanvas实例的引用
      const blankCanvases = {};
      
      // 橡皮擦模式标志
      let eraserMode = false;
      
      // 错误单词数组
      let errorWordIds = [];
      
      // 获取所有单词卡片
      const wordCards = document.querySelectorAll('.word-card');
      
      // 遍历每个单词卡片
      wordCards.forEach(function(wordCard) {
        const wordIndex = wordCard.id.split('-')[1];
        
        // 获取该单词卡片中的所有空格
        const blanks = wordCard.querySelectorAll('.blank-letter');
        
        // 为每个空格创建 BlankCanvas 实例
        blanks.forEach(function(blank) {
          const blankId = blank.id;
          const blankCanvas = new BlankCanvas(blankId, model);
          
          // 存储BlankCanvas实例以便后续使用
          blankCanvases[blankId] = blankCanvas;
          
          // 添加点击事件处理橡皮擦功能
          blank.addEventListener('click', function() {
            if (eraserMode) {
              const blankId = this.id;
              const blankCanvas = blankCanvases[blankId];
              
              // 检查是否已被识别（有data-prediction属性）
              const hasPrediction = this.hasAttribute('data-prediction');
              
              // 检查是否有canvas容器
              const hasCanvas = this.querySelector('.canvas-container') !== null;
              
              // 检查canvas是否有手写痕迹
              const hasDrawing = hasCanvas && !blankCanvas.fabricCanvas.isEmpty();
              this.removeAttribute('data-prediction');
              
              if (!hasCanvas && hasPrediction) {
                // 情况1: 已被识别且canvas已被移除，需要重建canvas
                console.log(`重建canvas: ${blankId}`);
                
                // 清除识别结果
                this.textContent = '';
                
                // 重新创建BlankCanvas实例
                blankCanvases[blankId] = new BlankCanvas(blankId, model);
              } else if (hasCanvas && hasDrawing) {
                // 情况2: 有canvas且有手写痕迹，清除手写痕迹
                console.log(`清除手写痕迹: ${blankId}`);
                blankCanvas.clear();
              } else if (!hasCanvas && !hasPrediction) {
                // 情况3: 没有canvas也没有预测结果，可能是初始状态或其他情况
                console.log(`初始化canvas: ${blankId}`);
                blankCanvases[blankId] = new BlankCanvas(blankId, model);
              }
              // 情况4: 有canvas但没有手写痕迹，不做任何操作
            }
          });
          
          console.log(`初始化空格: ${blankId}`);
        });
      });
      
      // 添加提交按钮点击事件
      $('#submitBtn').click(function() {
        // 检查所有空格是否都已填写
        const emptyBlanks = $('.blank-letter').filter(function() {
          return $(this).text() === '';
        });
        
        if (emptyBlanks.length > 0) {
          Swal.fire({
            title: '提示',
            text: '请填写所有空格后再提交',
            icon: 'warning'
          });
          return;
        }
        
        // 检查所有单词是否正确
        let allCorrect = true;
        let correctCount = 0;
        let incorrectCount = 0;
        errorWordIds = []; // 清空错误单词数组
        
        // 遍历所有单词卡片
        $('.word-card').each(function() {
          const wordCard = $(this);
          const wordId = wordCard.data('id');
          let wordCorrect = true;
          
          // 检查该单词卡片中的所有空格
          wordCard.find('.blank-letter').each(function() {
            const userInput = $(this).text().toLowerCase();
            const correctLetter = $(this).data('correct').toLowerCase();
            
            if (userInput !== correctLetter) {
              wordCorrect = false;
              allCorrect = false;
            }
          });
          
          // 根据结果设置单词卡片样式
          if (wordCorrect) {
            wordCard.addClass('correct').removeClass('incorrect');
            correctCount++;
          } else {
            wordCard.addClass('incorrect').removeClass('correct');
            incorrectCount++;
            errorWordIds.push(wordId);
          }
        });
        
        // 根据结果显示不同的对话框
        if (allCorrect) {
          Swal.fire({
            title: '恭喜你，全对！',
            text: '奖励：<%= exercise.award %>',
            icon: 'success',
            confirmButtonText: '确定'
          }).then((result) => {
            if (result.isConfirmed) {
              // 调用完成练习接口
              $.ajax({
                url: '/vocab_exercise/done/<%= exercise._id %>',
                type: 'POST',
                headers: {
                  'Authorization': `Bearer ${getCookie('token')}`
                },
                success: function(response) {
                  if (response.err_code === 0) {
                    // 返回练习题列表页面
                    window.location.href = '/exercise/index';
                  } else {
                    Swal.fire('错误', response.err_msg, 'error');
                  }
                },
                error: function() {
                  Swal.fire('错误', '标记练习完成失败', 'error');
                }
              });
            }
          });
        } else {
          Swal.fire({
            title: '继续努力！',
            text: `答对${correctCount}个，答错${incorrectCount}个`,
            icon: 'info',
            confirmButtonText: '继续练习'
          }).then((result) => {
            if (result.isConfirmed) {
              // 调用记录错误单词接口
              $.ajax({
                url: '/vocab_exercise/error/<%= user._id %>',
                type: 'POST',
                headers: {
                  'Authorization': `Bearer ${getCookie('token')}`
                },
                contentType: 'application/json',
                data: JSON.stringify({ vocab_ids: errorWordIds }),
                success: function(response) {
                  if (response.err_code === 0) {
                    // 移除正确的单词卡片
                    $('.word-card.correct').fadeOut(500, function() {
                      $(this).remove();
                    });
                    
                    // 清空错误单词卡片中的空格
                    $('.word-card.incorrect').each(function() {
                      $(this).find('.blank-letter').each(function() {
                        const blankId = $(this).attr('id');
                        // 移除预测结果
                        $(this).removeAttr('data-prediction');
                        $(this).text('');
                        
                        // 重新创建BlankCanvas实例
                        blankCanvases[blankId] = new BlankCanvas(blankId, model);
                      });
                    });
                  } else {
                    Swal.fire('错误', response.err_msg, 'error');
                  }
                },
                error: function() {
                  Swal.fire('错误', '记录错误单词失败', 'error');
                }
              });
            }
          });
        }
      });
      
      // 橡皮擦按钮点击事件
      $('#eraserBtn').click(function() {
        // 切换橡皮擦模式
        eraserMode = !eraserMode;
        
        // 更新橡皮擦按钮样式
        if (eraserMode) {
          $(this).css({
            'background-color': '#007bff',
            'border-color': '#007bff'
          });
          $(this).find('i').css('color', 'white');
          $('body').css('cursor', 'url("/images/eraser-cursor.png"), auto');
          
          // 禁用所有canvas的绘图模式
          Object.values(blankCanvases).forEach(canvas => {
            if (canvas.fabricCanvas) {
              canvas.fabricCanvas.isDrawingMode = false;
            }
          });
        } else {
          $(this).css({
            'background-color': '#f8f9fa',
            'border-color': '#dee2e6'
          });
          $(this).find('i').css('color', '#6c757d');
          $('body').css('cursor', 'auto');
          
          // 重新启用所有canvas的绘图模式
          Object.values(blankCanvases).forEach(canvas => {
            if (canvas.fabricCanvas) {
              canvas.fabricCanvas.isDrawingMode = true;
            }
          });
        }
      });
      
      // 点击页面空白处退出橡皮擦模式
      $(document).click(function(e) {
        // 如果点击的不是橡皮擦按钮和空格，则退出橡皮擦模式
        if (eraserMode && 
            !$(e.target).closest('.eraser-btn').length && 
            !$(e.target).closest('.blank-letter').length &&
            !$(e.target).closest('.canvas-container').length) {
          
          // 触发橡皮擦按钮点击事件以退出橡皮擦模式
          $('#eraserBtn').click();
        }
      });
      
      // 查看单词按钮点击事件
      $('.peek-btn').click(function() {
        const wordIndex = $(this).data('word-index');
        const wordCard = $(`#word-${wordIndex}`);
        const wordId = wordCard.data('id');
        const revealElement = $(`#reveal-${wordIndex}`);
        const icon = $(this).find('i');
        
        // 切换图标和显示状态
        if (icon.hasClass('fa-eye-slash')) {
          // 显示单词
          icon.removeClass('fa-eye-slash').addClass('fa-eye');
          revealElement.slideDown();
          
          // 将单词ID添加到错误单词数组
          if (!errorWordIds.includes(wordId)) {
            errorWordIds.push(wordId);
          }
          
          // 20秒后自动隐藏
          setTimeout(() => {
            icon.removeClass('fa-eye').addClass('fa-eye-slash');
            revealElement.slideUp();
          }, 20000);
        } else {
          // 隐藏单词
          icon.removeClass('fa-eye').addClass('fa-eye-slash');
          revealElement.slideUp();
        }
      });
      
      // 获取cookie函数
      function getCookie(name) {
        const value = `; ${document.cookie}`;
        const parts = value.split(`; ${name}=`);
        if (parts.length === 2) return parts.pop().split(';').shift();
      }
    });
  </script>
</body>
</html> 